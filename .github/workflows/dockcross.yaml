#name: CMake

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'     
        required: true
        default: 'warning' 
        type: choice
        options:
        - info
        - warning
        - debug 
#      tags:
#        description: 'Test scenario tags'
#        required: false 
#        type: boolean
#      environment:
#        description: 'Environment to run tests against'
#        type: environment
#        required: true 

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  BUILD_TESTS: yes

jobs:
  dockcross:
    name: ${{ matrix.arch_name }}
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        arch_name: [android-arm64, android-arm, linux-armv6, linux-armv7, linux-arm64, manylinux2010-x64]
    steps:
      - uses: actions/checkout@v1
        with:
          submodules: recursive
      - name: setup dockcross
        run: docker run --rm dockcross/${{ matrix.arch_name }} > ./dockcross-${{ matrix.arch_name }}; chmod +x ./dockcross-${{ matrix.arch_name }}
      - name: configure
        run: ./dockcross-${{ matrix.arch_name }} cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=build/${{ matrix.arch_name }}/install -DBUILD_BACKEND=ON -DBUILD_SHARED_LIBS=OFF -j 2 -Bbuild/${{ matrix.arch_name }} -H.
      - name: build
        run: ./dockcross-${{ matrix.arch_name }} cmake --build build/${{ matrix.arch_name }} -j 2 --target install
      - name: Test
        working-directory: ${{github.workspace}}/build
        run: ./dockcross-${{ matrix.arch_name }} src/boomaga/tests/boomaga_test
        # Execute tests defined by the CMake configuration.  
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        # run: ctest -C ${{env.BUILD_TYPE}}
        #run: src/boomaga/tests/boomaga_test

  build-and-test:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Install Deps
        # eatmydata: This package contains a small LD_PRELOAD library (libeatmydata) and a couple of helper utilities 
        # designed to transparently disable fsync and friends (like open(O_SYNC)). This has two side-effects: 
        # making software that writes data safely to disk a lot quicker and making this software no longer crash safe.
      run: |
        sudo apt update && sudo DEBIAN_FRONTEND=noninteractive apt install -yy eatmydata
        export eatmydata=/usr/bin/eatmydata ; # export sudo="/usr/bin/sudo eatmydata"
        sudo $eatmydata apt-get -y --no-upgrade install \
                          build-essential pkg-config cmake \
                          qtbase5-dev qttools5-dev-tools qttools5-dev \
                          libcups2-dev libsnappy-dev libpoppler-cpp-dev \
                          ghostscript
        #
        # sudo $eatmydata apt-get -y install qtbase5-dev qttools5-dev-tools qttools5-dev
        # sudo $eatmydata apt-get -y install libcups2-dev libsnappy-dev libpoppler-cpp-dev
        # sudo $eatmydata apt-get -y install ghostscript
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        export eatmydata=/usr/bin/eatmydata
        $eatmydata cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DBUILD_TESTS=${{env.BUILD_TESTS}}
    - name: Build
      # Build your program with the given configuration
      # run: make -j8
      run: $eatmydata cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}


    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      # run: ctest -C ${{env.BUILD_TYPE}}
      run: src/boomaga/tests/boomaga_test
      
