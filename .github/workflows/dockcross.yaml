#name: dockcross CMake

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'     
        required: true
        default: 'warning' 
        type: choice
        options:
        - info
        - warning
        - debug 
#      tags:
#        description: 'Test scenario tags'
#        required: false 
#        type: boolean
#      environment:
#        description: 'Environment to run tests against'
#        type: environment
#        required: true 

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  BUILD_TESTS: yes

jobs:
  dockcross:
    name: ${{ matrix.arch_name }}
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        arch_name: [linux-x64, manylinux2010-x64]
        # get all archs with: cd /tmp && curl https://raw.githubusercontent.com/dockcross/dockcross/master/Makefile -o dockcross-Makefile && for image in $(make -f dockcross-Makefile display_images); do   echo -n " $image,"; done
        #arch_name: [linux-x64, android-arm64, android-arm, linux-armv6, linux-armv7, linux-arm64, manylinux2010-x64]
        #arch_name: [android-arm, android-arm64, android-x86, android-x86_64, linux-x86, linux-x64, linux-x64-clang, linux-arm64, linux-arm64-musl, linux-arm64-full, linux-armv5, linux-armv5-musl, linux-m68k-uclibc, linux-s390x, linux-x64-tinycc, linux-armv6, linux-armv6-lts, linux-armv6-musl, linux-arm64-lts, linux-armv7l-musl, linux-armv7, linux-armv7a, linux-armv7-lts, linux-x86_64-full, linux-mips, linux-ppc64le, linux-riscv64, linux-riscv32, linux-xtensa-uclibc, web-wasi, windows-static-x86, windows-static-x64, windows-static-x64-posix, windows-armv7, windows-shared-x86, windows-shared-x64, windows-shared-x64-posix, windows-arm64, manylinux2014-x64, manylinux2014-x86, manylinux2014-aarch64, web-wasm]
      fail-fast: false
    steps:
      - uses: actions/checkout@v1
        with:
          submodules: recursive
      - name: Install Deps
        # eatmydata: This package contains a small LD_PRELOAD library (libeatmydata) and a couple of helper utilities 
        # designed to transparently disable fsync and friends (like open(O_SYNC)). This has two side-effects: 
        # making software that writes data safely to disk a lot quicker and making this software no longer crash safe.
        run: |
          sudo apt update && sudo DEBIAN_FRONTEND=noninteractive apt install -o APT::Install-Suggests=0 -o APT::Install-Recommends=0 -yy eatmydata
          export eatmydata=/usr/bin/eatmydata ; # export sudo="/usr/bin/sudo eatmydata"
          sudo $eatmydata apt-get -y --no-upgrade -o APT::Install-Suggests=0 -o APT::Install-Recommends=0 install \
                          build-essential pkg-config cmake \
                          qtbase5-dev qttools5-dev-tools qttools5-dev \
                          libcups2-dev libsnappy-dev libpoppler-cpp-dev \
                          ghostscript
      - name: setup dockcross
        run: docker run --rm dockcross/${{ matrix.arch_name }} > ./dockcross-${{ matrix.arch_name }}; chmod +x ./dockcross-${{ matrix.arch_name }}
      - name: configure
        #run: ./dockcross-${{ matrix.arch_name }} cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=build/${{ matrix.arch_name }}/install -DBUILD_BACKEND=ON -DBUILD_SHARED_LIBS=OFF -j 2 -Bbuild/${{ matrix.arch_name }} -H.
        run: ./dockcross-${{ matrix.arch_name }} cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=build/${{ matrix.arch_name }}/install -DBUILD_BACKEND=ON -DBUILD_SHARED_LIBS=OFF -Bbuild/${{ matrix.arch_name }} -H.
      - name: build
        #run: ./dockcross-${{ matrix.arch_name }} cmake --build build/${{ matrix.arch_name }} -j 2 --target install
        run: ./dockcross-${{ matrix.arch_name }} cmake --build build/${{ matrix.arch_name }} --target install
      - name: Test
        working-directory: ${{github.workspace}}/build
        run: ./dockcross-${{ matrix.arch_name }} src/boomaga/tests/boomaga_test
        # Execute tests defined by the CMake configuration.  
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        # run: ctest -C ${{env.BUILD_TYPE}}
        #run: src/boomaga/tests/boomaga_test
